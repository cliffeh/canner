#!/usr/bin/env python3

import os
import re
import sys
import mimetypes
import subprocess
import urllib.request

SITE_CMD = '../examples/site-with-prefix -H 127.0.0.1 -p 0 -v'
SITEROOT = '../examples/static'


def test_uri(uri, filename):
    with open(filename, 'r') as f:
        file_contents = f.read()
    r = urllib.request.urlopen(uri)
    mimetype = mimetypes.guess_type(filename)[0]

    content = r.read()

    assert r.status == 200, f'status code {r.status_code} != 200'
    assert r.headers['Content-Type'] == mimetype, f'incorrect mime type {mimetype}'
    assert int(r.headers['Content-Length']) == len(
        content), f'incorrect content length {len(content)} != {r.headers["Content-Length"]}'
    assert content.decode(
        'utf-8') == file_contents, 'file contents do not match'

    return True


def main():
    proc = subprocess.Popen(
        SITE_CMD.split(), stdout=subprocess.PIPE, bufsize=0, universal_newlines=True)

    ROOT_URI = None

    # info: listening on 127.0.0.1:34079
    while not ROOT_URI:
        line = proc.stdout.readline()
        m = re.match(r'.*listening on (127\.0\.0\.1:\d+)', line)
        if m:
            ROOT_URI = f'http://{m.group(1)}/static'

    print(f'using root uri: {ROOT_URI}')

    rc = 0
    for root, dirs, files in os.walk(SITEROOT, topdown=False):
        for name in files:
            fullpath = os.path.join(root, name)
            relpath = fullpath.replace(SITEROOT, "")
            uris = [f'{ROOT_URI}{relpath}']
            # special case for index.html
            if name == 'index.html':
                # with trailing slash
                uris.append(f'{ROOT_URI}{relpath[0:-len(name)]}')
                # without trailing slash
                uris.append(f'{ROOT_URI}{relpath[0:-(len(name)+1)]}')

            for uri in uris:
                print(f'testing {uri} => {fullpath}', end=' ')

                try:
                    test_uri(uri, fullpath)
                    print('PASS')
                except AssertionError as msg:
                    print(f'FAIL ({msg})')
                    rc = 1

    # clean up after ourselves
    proc.kill()

    sys.exit(rc)


if __name__ == '__main__':
    main()
