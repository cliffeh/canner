// TODO separate access log?
// TODO support user-identifier and userid?
// TODO support retrieving method (instead of hardcoding it)
// TODO protocol (e.g., HTTP/1.1) - not exposed by evhttp_uri?
// TODO combined log format?
// Common Log Format: https://en.wikipedia.org/wiki/Common_Log_Format
void
log_access (const char *client_ip, time_t *rawtime, const char *method,
            const char *uri, int status, long size)
{
  struct tm *utc = gmtime (rawtime);
  char timestamp[32];
  strftime (timestamp, 32, "%d/%b/%Y:%H:%M:%S %z", utc);

  printf ("access: %s - - [%s] \"%s %s\" %i %ld\n", client_ip, timestamp,
          method, uri, status, size);
}

struct options
{
  int port;
  int verbose;

  const char *bind;
};

static void
print_usage (FILE *out, const char *prog, int exit_code)
{
  fprintf (out,
           "usage: %s [ OPTS ]\n"
           " -H      address to bind (default: %s)\n"
           " -p      port to bind (default: %i)\n"
           " -v      enable verbose debugging\n"
           " -h      print a brief help message and exit\n",
           prog, DEFAULT_BIND, DEFAULT_PORT);
  exit (exit_code);
}

static struct options
parse_opts (int argc, char *argv[])
{
  struct options o = { 0 };
  int opt;

  o.port = DEFAULT_PORT;

  while ((opt = getopt (argc, argv, "hp:H:v")) != -1)
    {
      switch (opt)
        {
        case 'p':
          o.port = atoi (optarg);
          break;
        case 'H':
          o.bind = optarg;
          break;
        case 'h':
          print_usage (stdout, argv[0], 0);
          break;
        case 'v':
          ++o.verbose;
          break;
        default:
          fprintf (stderr, "unknown option: %c\n", opt);
          print_usage (stderr, argv[0], 1);
          break;
        }
    }

  if (!o.bind)
    o.bind = DEFAULT_BIND;

  return o;
}

static int
display_listen_sock (struct evhttp_bound_socket *handle)
{
  struct sockaddr_storage ss = { 0 };
  evutil_socket_t fd;
  ev_socklen_t socklen = sizeof (ss);
  char addrbuf[128];
  void *inaddr;
  const char *addr;
  int got_port = -1;

  fd = evhttp_bound_socket_get_fd (handle);
  if (getsockname (fd, (struct sockaddr *)&ss, &socklen))
    {
      log_error ("getsockname() failed");
      return 1;
    }

  if (ss.ss_family == AF_INET)
    {
      got_port = ntohs (((struct sockaddr_in *)&ss)->sin_port);
      inaddr = &((struct sockaddr_in *)&ss)->sin_addr;
    }
  else if (ss.ss_family == AF_INET6)
    {
      got_port = ntohs (((struct sockaddr_in6 *)&ss)->sin6_port);
      inaddr = &((struct sockaddr_in6 *)&ss)->sin6_addr;
    }
  else
    {
      log_warn ("weird address family %d", ss.ss_family);
      return 1;
    }

  addr = evutil_inet_ntop (ss.ss_family, inaddr, addrbuf, sizeof (addrbuf));
  if (addr)
    {
      log_info ("listening on %s:%d", addr, got_port);
    }
  else
    {
      log_error ("evutil_inet_ntop failed");
      return 1;
    }

  return 0;
}

int
main (int argc, char *argv[])
{
  struct event_base *base = NULL;
  struct evhttp *http = NULL;
  struct evhttp_bound_socket *handle = NULL;
  struct options o = parse_opts (argc, argv);

  if (!(base = event_base_new ()))
    log_fatal ("could not create event_base");

  // TODO signal handling for reload/shutdown!

  if (!(http = evhttp_new (base)))
    log_fatal ("could not create evhttp");

  // TODO returns a 501 for unknown methods, and we probably really want a 405
  evhttp_set_allowed_methods (http, EVHTTP_REQ_GET);

#ifdef CANNER_HAS_CUSTOM_CALLBACKS
  canner_register_custom_callbacks (http);
#endif

  canner_register_static_callbacks (http);

  log_info ("binding to %s:%i", o.bind, o.port);

  if (!(handle = evhttp_bind_socket_with_handle (http, o.bind, o.port)))
    log_fatal ("couldn't bind to %s:%i", o.bind, o.port);

  display_listen_sock (handle);
  fflush (stdout); // make sure logs have been flushed before we start blocking
                   // on the event loop

  event_base_dispatch (base);

  if (http)
    evhttp_free (http);
  if (base)
    event_base_free (base);
}
